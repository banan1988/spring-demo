plugins {
    id "java"
    id "idea"

    id "maven-publish"

    // springfox-swagger2:2.9.2 is not compatible with version 2.2.0.RELEASE so we cannot upgrade it :(
    id "org.springframework.boot" version "2.2.4.RELEASE"
    id "io.spring.dependency-management" version "1.0.9.RELEASE"

    // code coverage
    id "jacoco"
    // code quality
    id "org.sonarqube" version "2.8"

    // Generate Git Information
    id "com.gorylenko.gradle-git-properties" version "2.2.0"

    // Keep dependencies up to date
    // ./gradlew dependencyUpdates -Drevision=release
    id "com.github.ben-manes.versions" version "0.27.0"

    // Release & Publish
    // ./gradlew currentVersion
    // ./gradlew release
    id "pl.allegro.tech.build.axion-release" version "1.10.3"
}

project.group = artifactGroup

sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

def isNonStable = { String version ->
    def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { it -> version.toUpperCase().contains(it) }
    def regex = /^[0-9,.v-]+(-r)?$/
    return !stableKeyword && !(version ==~ regex)
}

dependencyUpdates {
    rejectVersionIf {
        isNonStable(it.candidate.version)
    }

    revision = "release"
    gradleReleaseChannel = "current"
}

configurations {
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
    compileOnly {
        extendsFrom annotationProcessor
    }
}

configurations.all {
    transitive = true
    exclude group: "junit", module: "junit"
}

repositories {
    mavenLocal()

    mavenCentral()
    jcenter()

    maven { url "https://oss.jfrog.org/artifactory/oss-snapshot-local/" }
}

java {
    withJavadocJar()
    withSourcesJar()
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }
    repositories {
        maven {
            // change URLs to point to your repos, e.g. http://my.org/repo
            def releasesRepoUrl = "$buildDir/repos/releases"
            def snapshotsRepoUrl = "$buildDir/repos/snapshots"
            url = version.endsWith("SNAPSHOT") ? snapshotsRepoUrl : releasesRepoUrl
        }
    }
}

idea {
    module {
        sourceDirs += file("src/main/jenkinsfile")
        downloadJavadoc = true
        downloadSources = true
    }
}

dependencies {
    // generated
    implementation "org.springframework.boot:spring-boot-starter-actuator"
    implementation "org.springframework.boot:spring-boot-starter-cache"
    implementation "org.springframework.boot:spring-boot-starter-data-jpa"
    implementation "org.springframework.boot:spring-boot-starter-data-ldap"
    implementation "org.springframework.boot:spring-boot-starter-data-rest"
    implementation "org.springframework.boot:spring-boot-starter-quartz"
    implementation "org.springframework.boot:spring-boot-starter-security"
    implementation "org.springframework.boot:spring-boot-starter-thymeleaf"
    implementation "org.springframework.boot:spring-boot-starter-web"
    implementation "org.liquibase:liquibase-core"

    compileOnly "org.projectlombok:lombok"

    developmentOnly "org.springframework.boot:spring-boot-devtools"

    runtimeOnly "com.h2database:h2"
    runtimeOnly "org.postgresql:postgresql"

    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"
    annotationProcessor "org.projectlombok:lombok"

    testImplementation "org.springframework.boot:spring-boot-starter-test"
    testImplementation "org.springframework.security:spring-security-test"

    /************************
     added by me
     ************************/

    // swagger 2.x
    implementation "io.springfox:springfox-swagger2:${swaggerVersion}"
    implementation "io.springfox:springfox-swagger-ui:${swaggerVersion}"
    // swagger 3.x
    implementation "io.springfox:springfox-data-rest:${swaggerVersion}"

    // junit5
    testImplementation "org.junit.jupiter:junit-jupiter:${junit5Version}"

    // templates
    compile "nz.net.ultraq.thymeleaf:thymeleaf-layout-dialect:2.4.1"
    compile "org.thymeleaf.extras:thymeleaf-extras-springsecurity5:3.0.4.RELEASE"

    // CSS styles and JS scripts
    compile "org.webjars:bootstrap:4.4.1"
    compile "org.webjars:jquery:3.4.1"
    compile "org.webjars:angularjs:1.7.9"

    // LDAP authentication
    compile("org.springframework.ldap:spring-ldap-core")
    compile("org.springframework.security:spring-security-ldap")
    // LDAP local server
    compile("com.unboundid:unboundid-ldapsdk")

    // libraries
    compile "com.google.guava:guava:28.2-jre"
}

def username = System.getenv("USERNAME") ? System.getenv("USERNAME") : System.getProperty("user.name")
def branchName = System.getenv("BRANCH_NAME") ? System.getenv("BRANCH_NAME") : "${username}"
logger.warn("Username: ${username}")
logger.warn("Branch name: ${branchName}")

def jacocoExecReportPath = "${buildDir}/jacoco/jacoco.exec"
test {
    useJUnitPlatform()

    jacoco {
        // default: ${buildDir}/jacoco/test.exec
        destinationFile = file("${jacocoExecReportPath}")
    }
}
// after test task gradle always execute jacoco's tasks
test.finalizedBy jacocoTestReport
test.finalizedBy jacocoTestCoverageVerification

jacoco {
    toolVersion = "${jacocoVersion}"
}

def jacocoXmlReportPath = "${buildDir}/jacoco/jacoco.xml"
jacocoTestReport {
    reports {
        csv.enabled false

        xml.enabled true
        xml.destination file("${jacocoXmlReportPath}")

        html.enabled true
        html.destination file("${buildDir}/jacoco/html")
    }
}
project.tasks["jacocoTestReport"].dependsOn "test"

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = Double.parseDouble("${jacocoQualityGate}")
            }
        }
    }
}
project.tasks["jacocoTestCoverageVerification"].dependsOn "jacocoTestReport"

sonarqube {
    properties {
        property "sonar.host.url", "${sonarHostUrl}"
        property "sonar.login", "${sonarLogin}"

        // Branch analysis is available in Developer Edition and above
//        property "sonar.branch.name", "${branchName}"

        property "sonar.jacoco.reportPaths", "${jacocoExecReportPath}"
        property "sonar.coverage.jacoco.xmlReportPaths", "${jacocoXmlReportPath}"
        property "sonar.junit.reportPaths", "${buildDir}/test-results/test/"
    }
}
project.tasks["sonarqube"].dependsOn "jacocoTestReport"
project.tasks["sonarqube"].dependsOn "jacocoTestCoverageVerification"

// Generate Build Information
springBoot {
    buildInfo {
        properties {
            additional = [
                    "description": "description"
            ]
        }
    }
}
// HACK - Up to date build info needs to be generated after processResources
bootBuildInfo.dependsOn(processResources)
generateGitProperties.dependsOn(processResources)
